@using ScoreUI.Models.Consts
@using ScoreUI.Models.Entities
@using ScoreUI.Services.Interfaces
@attribute [Route(Urls.Tournaments.ManageId)]

@inject ITournamentService _tournamentService
@inject ILogger<ManageId> _logger

@if (!_loaded)
{
	<MudProgressCircular Indeterminate />
}
else if (_tournament is null)
{
	<ScoreUI.Pages.Tournaments.NotFound />
}
else
{
	<ManagePage Tournament="_tournament" Token="@Token" />
}

@code {
	[Parameter]
	public Guid TournamentId { get; set; }
	
	[Parameter, SupplyParameterFromQuery]
	public string? Token { get; set; }

	Tournament? _tournament;
	bool _loaded;

	protected override async Task OnInitializedAsync()
	{
		_tournament = await _tournamentService.Get(TournamentId);
		
		if (_tournament is null)
		{
			_logger.LogWarning("Attempted to access unknown tournament by id {TournamentId}", 
				TournamentId);
		}
		
		_loaded = true;
	}

}