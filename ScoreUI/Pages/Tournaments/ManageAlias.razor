@using ScoreUI.Models.Consts
@using ScoreUI.Models.Entities
@using ScoreUI.Services.Interfaces
@attribute [Route(Urls.Tournaments.ManageAlias)]

@inject ITournamentService _tournamentService
@inject ILogger<ManageAlias> _logger

@if (!_loaded)
{
	<MudProgressCircular Indeterminate />
}
else if (_tournament is null)
{
	<ScoreUI.Pages.Tournaments.NotFound />
}
else
{
	<ManagePage Tournament="_tournament" Token="@Token" />
}

@code {
	[Parameter]
	public string? TournamentAlias { get; set; }
	
	[Parameter, SupplyParameterFromQuery]
	public string? Token { get; set; }

	Tournament? _tournament;
	bool _loaded;

	protected override async Task OnInitializedAsync()
	{
		if (TournamentAlias is not null)
		{
			_tournament = await _tournamentService.FindByAlias(TournamentAlias);

			if (_tournament is null)
			{
				_logger.LogWarning("Attempted to access unknown tournament by alias {TournamentAlias}", 
					TournamentAlias);
			}
		}
		_loaded = true;
	}

}