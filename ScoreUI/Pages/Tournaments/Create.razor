@using ScoreUI.Models.Consts
@using ScoreUI.Models.Entities
@using ScoreUI.Services.Interfaces
@using ScoreUI.Components.Tournaments
@attribute [Route(Urls.Tournaments.Create)]

@inject ITournamentService _tournamentService
@inject NavigationManager _nav

<div class="d-flex justify-center">
	<MudPaper Style="width: 100%; max-width: 800px;">
		<div class="gray lighten-3 pa-3">
			<MudText Typo="Typo.h5" Align="Align.Center">
				Kreator turnieju
			</MudText>
			<MudStack Row Class="ma-3">
				<MudButton
					FullWidth
					StartIcon="@Icons.Material.Filled.ChevronLeft"
					Disabled="_currentPage == _pages.First()"
					OnClick="() => _currentPage = _pages[_pages.IndexOf(_currentPage) - 1]">
					Poprzednia
				</MudButton>
				<MudButton
					FullWidth
					EndIcon="@Icons.Material.Filled.ChevronRight"
					Disabled="_currentPage == _pages.Last() || _currentPage.Validator()"
					OnClick="() => _currentPage = _pages[_pages.IndexOf(_currentPage) + 1]">
					Następna
				</MudButton>
			</MudStack>
		</div>
		<div class="pa-3">
			@switch (_currentPage.Value)
			{
				case CreatorPage.Info:

					<TournamentInfoSettings Tournament="_tournament" OnUpdated="StateHasChanged" />

					break;

				case CreatorPage.MatchTypes:

					<TournamentMatchTypesSettings Tournament="_tournament" OnUpdated="StateHasChanged" />

					break;
					
				case CreatorPage.MatchSettings:

					<TournamentMatchSettings Tournament="_tournament" />
					
					break;
					
				case CreatorPage.AccessOptions:
					
					<MudAlert Class="my-3" Severity="Severity.Info" Variant="Variant.Filled" Dense NoIcon>
						Ustaw alias turnieju, jeżeli chcesz chcesz móc szybko do niego wrócić
					</MudAlert>
					
					<TournamentAliasEditor @bind-Value="_tournament.Settings.Alias" />
					
					<MudAlert Class="my-3" Severity="Severity.Info" Variant="Variant.Filled" Dense NoIcon>
						Ustaw klucz dostępu do turnieju, jeżeli chcesz zabezpieczyć do niego dostęp
					</MudAlert>
					
					<MudTextField
						@bind-Value="_tournament.Settings.Key"
						Label="Klucz dostępu do turnieju"
						Variant="Variant.Outlined"
						Class="my-3" />

					break;
					
				case CreatorPage.Final:
					
					<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mt-5">
						<MudIcon Icon="@Icons.Material.Filled.Check" />
						<MudText Color="Color.Success">
							<strong>Wszystko gotowe!</strong>
						</MudText>
					</MudStack>
					
					<MudText>
						Zaraz przeniesiemy Cię na stronę turnieju, gdzie będziesz mógł dodać uczestników i stworzyć mecze
					</MudText>
					
					<MudButton Color="Color.Success" Variant="Variant.Filled" FullWidth OnClick="Submit" Class="mt-10 mb-5">
						Zatwierdź
					</MudButton>
					
					break;
			}
		</div>
	</MudPaper>
</div>

@code {

	readonly Tournament _tournament = new()
	{
		Name = string.Empty
	};

	List<Page> _pages = [];
	Page _currentPage = default!;

	protected override void OnParametersSet()
	{
		_pages =
		[
			new(CreatorPage.Info, () => string.IsNullOrWhiteSpace(_tournament.Name)),
			new(CreatorPage.MatchTypes, () => (_tournament.Settings.SimpleMatch.IsEnabled | _tournament.Settings.DualPointsMatch.IsEnabled | _tournament.Settings.MultiDuelMatch.IsEnabled) == false),
			new(CreatorPage.MatchSettings, () => false),
			new(CreatorPage.AccessOptions, () => false),
			new(CreatorPage.Final, () => false)
		];
		_currentPage = _pages[0];
	}

	enum CreatorPage
	{
		Info,
		MatchTypes,
		MatchSettings,
		AccessOptions,
		Final
	}

	record Page(CreatorPage Value, Func<bool> Validator);

	async Task Submit()
	{
		await _tournamentService.Create(_tournament);

		if (!string.IsNullOrWhiteSpace(_tournament.Settings.Alias))
		{
			_nav.NavigateTo(Urls.Tournaments.GetManageAlias(_tournament.Settings.Alias));
		}
		else
		{
			_nav.NavigateTo(Urls.Tournaments.GetManageId(_tournament.Id));
		}
	}

}