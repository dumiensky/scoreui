@using ScoreUI.Models.Entities
@using ScoreUI.Components.Tournaments

@switch (_accessState)
{
	case AccessState.PasswordPending:
		
		<div class="d-flex justify-center">
			<div style="width: 100%; max-width: 500px">
				<MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Error">
					Ten turniej jest zabezpieczony kluczem dostępu
				</MudText>

				<MudTextField
					@bind-Value="_key"
					Variant="Variant.Outlined"
					Class="my-3"
					Label="Klucz dostępu"/>

				<MudButton
					Variant="Variant.Filled"
					Color="Color.Success"
					Class="my-3"
					OnClick="SubmitKey"
					FullWidth>
					Zatwierdź
				</MudButton>
			</div>
		</div>

		break;
		
	case AccessState.AccessDenied:
		
		<MudAlert Severity="Severity.Error" Variant="Variant.Filled">
			Odmowa dostępu
		</MudAlert>
		
		break;
		
	case AccessState.AccessGranted:
		
		<ManagePanel Tournament="Tournament" />

		break;
}

@code {
	[Parameter, EditorRequired]
	public required Tournament Tournament { get; set; }

	string? _key;
	AccessState _accessState = AccessState.PasswordPending;

	protected override void OnInitialized()
	{
		if (string.IsNullOrEmpty(Tournament.Settings.Key))
			_accessState = AccessState.AccessGranted;
	}

	void SubmitKey()
	{
		if (_key?.ToLower() == Tournament.Settings.Key)
		{
			_accessState = AccessState.AccessGranted;
		}
		else
		{
			_accessState = AccessState.AccessDenied;
		}
	}

	enum AccessState
	{
		PasswordPending,
		AccessDenied,
		AccessGranted
	}
}