@using ClipLazor.Components
@using MongoDB.Wrapper.Abstractions
@using ScoreUI.Components.Displays
@using ScoreUI.Models.Consts
@using ScoreUI.Models.Entities
@using ScoreUI.Models.Enums
@using ScoreUI.Models.Extensions
@using ScoreUI.Services.Interfaces

@inject IDialogService _dialogService
@inject ITournamentService _tournamentService
@inject ISnackbar _snack
@inject IMongoDb _mongoDb
@inject IClipLazor _clipboard
@inject NavigationManager _nav
@inject ILogger<TournamentDisplaysPanel> _logger

<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
	<MudText Typo="Typo.h6">
		Ekrany
	</MudText>
	<MudStack Row AlignItems="AlignItems.Center">
		<MudButton Color="Color.Dark" StartIcon="@Icons.Material.Filled.Settings" OnClick="UpdateSettings">
			Ustawienia
		</MudButton>
		<MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddDisplay">
			Dodaj ekran
		</MudButton>
	</MudStack>
</MudStack>

@if (_displays is null)
{
	<MudProgressCircular Indeterminate />
}
else if (_displays.Any())
{
	<MudTable
		Items="_displays"
		EditTrigger="TableEditTrigger.EditButton"
		RowEditCommit="CommitEdit"
		Elevation="0"
		Hover>
		<RowTemplate>
			<MudTd>
				@(_displays.IndexOf(context) + 1)
			</MudTd>
			<MudTd>
				@context.Type.DisplayName()
			</MudTd>
			<MudTd>
				<ConnectedDisplayClientsAmount DisplayId="context.Id" />
			</MudTd>
			<MudTd>
				<MudButton
					Color="Color.Info"
					StartIcon="@Icons.Material.Filled.Link"
					OnClick="() => CopyLink(context)">
					Kopiuj adres
				</MudButton>
			</MudTd>
		</RowTemplate>
		<RowEditingTemplate>
			<MudTd>
				@(_displays.IndexOf(context) + 1)
			</MudTd>
			<MudTd>
				<MudSelect @bind-Value="context.Type">
					<MudSelectItem Value="@DisplayType.StreamOverlay">
						@DisplayType.StreamOverlay.DisplayName()
					</MudSelectItem>
					<MudSelectItem Value="@DisplayType.Standalone">
						@DisplayType.Standalone.DisplayName()
					</MudSelectItem>
				</MudSelect>
			</MudTd>
			<MudTd>
				<MudButton
					Variant="Variant.Filled"
					Color="Color.Error"
					Size="Size.Small"
					OnClick="() => DeleteDisplay(context)">
					Usuń
				</MudButton>
			</MudTd>
		</RowEditingTemplate>
	</MudTable>
}
else
{
	<MudAlert Severity="Severity.Info" Class="my-2">
		Nie dodano żadnych ekranów
	</MudAlert>
}

@code {

	[Parameter, EditorRequired]
	public required Tournament Tournament { get; set; }

	IList<Display>? _displays;

	protected override async Task OnInitializedAsync()
	{
		await LoadDisplays();
	}

	async Task LoadDisplays()
	{
		_displays = await _mongoDb.Get<Display>(_ => _.TournamentId == Tournament.Id);
		await InvokeAsync(StateHasChanged);
	}

	async Task AddDisplay()
	{
		var dialog = await _dialogService.ShowAsync<EditDisplayDialog>("Dodaj ekran");
		var result = await dialog.Result;

		if (result?.Data is EditDisplayDialog.Data rData)
		{
			var newDisplay = Display.Create(rData.DisplayType, Tournament.Id);
			await _mongoDb.Add(newDisplay);

			await LoadDisplays();
			_snack.Add("Dodano ekran", Severity.Success);
			_logger.LogInformation("Created display {DisplayId} in tournament {TournamentId}",
				newDisplay.Id, Tournament.Id);
		}
	}

	async Task DeleteDisplay(Display display)
	{
		if (await _dialogService.ShowMessageBox(
				title: "Usuwanie ekranu",
				message: "Jesteś pewien, że chcesz usunać ten ekran?",
				yesText: "Tak, usuń",
				cancelText: "Anuluj") != true)
			return;

		await _mongoDb.Delete<Display>(display.Id);

		_snack.Add("Usunięto ekran", Severity.Success);
		_logger.LogInformation("Deleted display {DisplayId} from tournament {TournamentId}",
			display.Id, Tournament.Id);

		await LoadDisplays();
	}

	async void CommitEdit(object? obj)
	{
		if (obj is not Display d)
			return;

		await _mongoDb.Replace(d);
	}

	async Task CopyLink(Display context)
	{
		var path = Urls.Displays.GetDisplay(context.Id);
		var url = _nav.ToAbsoluteUri(path);

		if (await _clipboard.WriteTextAsync(url.ToString().AsMemory()))
			_snack.Add("Skopiowano!", Severity.Success);
		else
			_snack.Add("Nie udało się skopiować adresu!", Severity.Error);
	}

	async Task UpdateSettings()
	{
		var dialog = _dialogService.Show<EditDisplaysSettingsDialog>(
			"Ustawienia ekranów",
			new DialogParameters<EditDisplaysSettingsDialog>()
			{
				{
					_ => _.Values,
					new(
						Tournament.Settings.Displays.ShowTournamentName,
						Tournament.Settings.Displays.UseShortTournamentName,
						Tournament.Settings.Displays.UseShortNames, 
						Tournament.Settings.Displays.ColorMode,
						Tournament.Settings.Displays.DisplaySumOfWonDuels,
						Tournament.Settings.Displays.TimerLocation)
				},
				{
					_ => _.TournamentAllowsMultiDuels,
					Tournament.Settings.MultiDuelMatch.IsEnabled
				},
				{
					_ => _.TournamentHasShortName,
					!string.IsNullOrWhiteSpace(Tournament.ShortName)
				}
			});

		var result = await dialog.Result;
		if (result?.Data is EditDisplaysSettingsDialog.Data data)
		{
			Tournament.Settings.Displays.ShowTournamentName = data.ShowTournamentName;
			Tournament.Settings.Displays.UseShortTournamentName = data.UseShortTournamentName;
			Tournament.Settings.Displays.UseShortNames = data.UseShortNames;
			Tournament.Settings.Displays.ColorMode = data.ColorMode;
			Tournament.Settings.Displays.DisplaySumOfWonDuels = data.DisplaySumOfWonDuels;
			Tournament.Settings.Displays.TimerLocation = data.TimerLocation;

			if (await _tournamentService.Update(Tournament))
				_logger.LogInformation("Updated display settings of tournament {TournamentId}", Tournament.Id);
		}
	}

}