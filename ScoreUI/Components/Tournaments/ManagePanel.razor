@using ScoreUI.Models.Entities
@using ScoreUI.Services.Interfaces

@inject IDialogService _dialogService
@inject ITournamentService _tournamentService
@inject ILogger<ManagePanel> _logger

<MudPaper Class="my-3 pa-3 indigo lighten-5">
	<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
		<MudText Typo="Typo.h3">
			@Tournament.Name
		</MudText>
		<MudButton Color="Color.Dark" StartIcon="@Icons.Material.Filled.Settings" OnClick="UpdateTournamentSettings">
			Ustawienia
		</MudButton>
	</MudStack>
</MudPaper>

<MudPaper Class="my-3 pa-3">
	<TournamentParticipantsPanel Tournament="Tournament" />
</MudPaper>

<MudPaper Class="my-3 pa-3">
	<TournamentMatchesPanel Tournament="Tournament" />
</MudPaper>

<MudPaper Class="my-3 pa-3">
	<TournamentDisplaysPanel Tournament="Tournament" />
</MudPaper>

@code {

	[Parameter, EditorRequired]
	public required Tournament Tournament { get; set; }

	async Task UpdateTournamentSettings()
	{
		var dialog = _dialogService.Show<EditTournamentDialog>(
			"Ustawienia turnieju",
			new DialogParameters<EditTournamentDialog>()
			{
				{ _ => _.Tournament, Tournament }
			});

		var result = await dialog.Result;

		if (result?.Data is Tournament newTournament)
		{
			Tournament.Name = newTournament.Name;
			Tournament.ShortName = newTournament.ShortName;
			Tournament.Settings.SimpleMatch = newTournament.Settings.SimpleMatch;
			Tournament.Settings.DualPointsMatch = newTournament.Settings.DualPointsMatch;
			Tournament.Settings.MultiDuelMatch = newTournament.Settings.MultiDuelMatch;

			if(await _tournamentService.Update(Tournament))
				_logger.LogInformation("Updated settings of tournament {TournamentId}", Tournament.Id);
		}
	}

}