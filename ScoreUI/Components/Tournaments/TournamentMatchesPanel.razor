@using ScoreUI.Components.Matches
@using ScoreUI.Models.Entities
@using ScoreUI.Services.Interfaces

@inject IDialogService _dialogService
@inject ITournamentService _tournamentService
@inject ISnackbar _snack
@inject ILogger<TournamentMatchesPanel> _logger

<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
	<MudText Typo="Typo.h6">
		Mecze
	</MudText>
	<MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddMatch">
		Dodaj mecz
	</MudButton>
</MudStack>

@if (Tournament.ActiveMatches.Any())
{
	foreach (var match in Tournament.ActiveMatches)
	{
		<div class="my-3">
			<MatchDisplay Tournament="Tournament" Match="match" OnDelete="DeleteMatch" />
		</div>
	}
}
else
{
	<MudAlert Severity="Severity.Info" Class="my-2">
		Nie dodano żadnego meczu
	</MudAlert>
}

@code {

	[Parameter, EditorRequired]
	public required Tournament Tournament { get; set; }
	
	async Task AddMatch()
	{
		var dialog = await _dialogService.ShowAsync<EditMatchDialog>("Dodaj mecz",
			new DialogParameters<EditMatchDialog>()
			{
				{ _ => _.Tournament, Tournament }
			});
		var result = await dialog.Result;

		if (result?.Data is EditMatchDialog.Data rData)
		{
			Match match = rData.MatchType switch
			{
				EditMatchDialog.MatchType.Simple => SimpleMatch.Create(rData.OneId, rData.TwoId, rData.DisplayText, rData.Comment),
				EditMatchDialog.MatchType.DualPoints => DualPointsMatch.Create(rData.OneId, rData.TwoId, rData.DisplayText, rData.Comment),
				EditMatchDialog.MatchType.MultiDuel => MultiDuelMatch.Create(rData.OneId, rData.TwoId, rData.DisplayText, rData.Comment),
				_ => throw new("Unsupported match type")
			};

			Tournament.Matches.Add(match);

			if (await _tournamentService.Update(Tournament))
			{
				_snack.Add("Dodano mecz", Severity.Success);
				_logger.LogInformation("Added new match {MatchId} in tournament {TournamentId}",
					match.Id, Tournament.Id);
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	async Task DeleteMatch(Match context)
	{
		if (await _dialogService.ShowMessageBox(
				title: "Usuwanie meczu",
				message: "Jesteś pewien, że chcesz usunąć ten mecz?",
				yesText: "Tak, usuń",
				cancelText: "Anuluj") != true)
			return;
		
		context.Deleted = true;

		if (await _tournamentService.Update(Tournament))
		{
			_snack.Add("Usunięto mecz", Severity.Success);
			_logger.LogInformation("Removed match {MatchId} from tournament {TournamentId}",
				context.Id, Tournament.Id);
		}

		await InvokeAsync(StateHasChanged);
	}

}