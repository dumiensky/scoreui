@using ScoreUI.Models.Entities

<MudStack Row Justify="Justify.SpaceBetween">
	<MudStack Row Spacing="5">
		<div>
			<MudText Align="Align.Center">@Settings.ScoreBName</MudText>
			<MudStack Row AlignItems="AlignItems.Center">
				<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreOneB += 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Add" />
					</MudButton>
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreOneB -= 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Remove" />
					</MudButton>
				</MudStack>
				<MudText Typo="Typo.h1">
					@Match.ScoreOneB
				</MudText>
			</MudStack>
		</div>
		<div>
			<MudText Align="Align.Center">@Settings.ScoreAName</MudText>
			<MudStack Row AlignItems="AlignItems.Center">
				<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreOneA += 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Add" />
					</MudButton>
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreOneA -= 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Remove" />
					</MudButton>
				</MudStack>
				<MudText Typo="Typo.h1">
					<strong>@Match.ScoreOneA</strong>
				</MudText>
			</MudStack>
		</div>
	</MudStack>
	<MudStack Row Justify="Justify.FlexEnd" Spacing="5">
		<div>
			<MudText Align="Align.Center">@Settings.ScoreAName</MudText>
			<MudStack Row AlignItems="AlignItems.Center">
				<MudText Typo="Typo.h1">
					<strong>@Match.ScoreTwoA</strong>
				</MudText>
				<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreTwoA += 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Add" />
					</MudButton>
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreTwoA -= 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Remove" />
					</MudButton>
				</MudStack>
			</MudStack>
		</div>
		<div>
			<MudText Align="Align.Center">@Settings.ScoreBName</MudText>
			<MudStack Row AlignItems="AlignItems.Center">
				<MudText Typo="Typo.h1">
					@Match.ScoreTwoB
				</MudText>
				<MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreTwoB += 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Add" />
					</MudButton>
					<MudButton Variant="Variant.Filled" OnClick="() => Modify(m => m.ScoreTwoB -= 1)" Disabled="Match.ScoringDisabled">
						<MudIcon Icon="@Icons.Material.Filled.Remove" />
					</MudButton>
				</MudStack>
			</MudStack>
		</div>
	</MudStack>
</MudStack>

@code {
	[Parameter, EditorRequired]
	public required DualPointsMatch Match { get; set; }
	
	[Parameter, EditorRequired]
	public required DualPointsMatchSettings Settings { get; set; }
	
	[Parameter]
	public EventCallback OnUpdate { get; set; }

	void Modify(Action<DualPointsMatch> action)
	{
		action(Match);
		OnUpdate.InvokeAsync();
	}
}