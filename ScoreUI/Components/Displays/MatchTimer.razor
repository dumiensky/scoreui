@using ScoreUI.Models.Entities
@using ScoreUI.Models.Events
@using ScoreUI.Services.Interfaces

@inject IDisplayHooks _displayHooks
@implements IDisposable

@if (_currentTime is not null)
{
	<div class="black" style="padding: 6px;">
		<MudText Typo="@Typo">
			@if (_currentTime.Value >= TimeSpan.Zero)
			{
				<strong class="@(_currentTime.Value > Match.GetSettings(Tournament).MaxTime ? "red-text" : "white-text")">
					@(_currentTime.Value.Minutes.ToString("00")):@(_currentTime.Value.Seconds.ToString("00"))
				</strong>
			}
			else
			{
				<strong class="red-text">
					- @(Math.Abs(_currentTime.Value.Minutes).ToString("00")):@(Math.Abs(_currentTime.Value.Seconds).ToString("00"))
				</strong>
			}
		</MudText>
	</div>
}


@code {

	[Parameter, EditorRequired]
	public required Match Match { get; set; }

	[Parameter, EditorRequired]
	public required Tournament Tournament { get; set; }

	[Parameter]
	public Typo Typo { get; set; } = Typo.h6;

	TimeSpan? _currentTime;

	protected override void OnInitialized()
	{
		_displayHooks.MatchTimerChanged += DisplayHooksOnMatchTimerChanged;
	}

	void DisplayHooksOnMatchTimerChanged(object? sender, MatchTimerChangedEventArgs e)
	{
		if (e.MatchId == Match.Id)
		{
			_currentTime = e.CurrentTime;
			InvokeAsync(StateHasChanged);
		}
	}

	void IDisposable.Dispose()
	{
		_displayHooks.MatchTimerChanged -= DisplayHooksOnMatchTimerChanged;
	}

}